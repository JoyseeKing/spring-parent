#这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName
spring.emily.datasource.druid.oracle.driver-class-name=oracle.jdbc.OracleDriver
#连接数据库的url，不同数据库不一样
spring.emily.datasource.druid.oracle.url=jdbc:oracle:thin:@10.10.81.115:1521:EMKHT
#连接数据库的用户名
spring.emily.datasource.druid.oracle.username=hkfjy
#用户密码
spring.emily.datasource.druid.oracle.password=AI#Kadfe
#数据库连接池类型
spring.emily.datasource.druid.oracle.db-type=oracle

#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时，默认：0
spring.emily.datasource.druid.oracle.initial-size=2
#最小连接池数，默认：0
spring.emily.datasource.druid.oracle.min-idle=2
#最大连接数，默认：8
spring.emily.datasource.druid.oracle.max-active=8
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁，默认：-1（推荐内网800ms,外网1200ms,因为tcp建立连接重试一般需要1s）
spring.emily.datasource.druid.oracle.max-wait=800

#mysql默认使用ping模式,可以通过设置系统属性System.getProperties().setProperty("druid.mysql.usePingMethod", "false")更改为sql模式
#用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。默认：缺省
# mysql默认：SELECT 1  oracle默认：SELECT 'x' FROM DUAL
spring.emily.datasource.druid.oracle.validation-query=SELECT 'x' FROM DUAL
#单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法，默认：-1
spring.emily.datasource.druid.oracle.validation-query-timeout=2
#申请连接时执行validationQuery检测连接是否有效，这个配置会降低性能。默认：false (如果test-on-borrow为true,那么test-while-idle无效)
spring.emily.datasource.druid.oracle.test-on-borrow=false
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。默认：true
spring.emily.datasource.druid.oracle.test-while-idle=true
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。默认：false
spring.emily.datasource.druid.oracle.test-on-return=false

#是否对空闲连接进行保活，默认：false
spring.emily.datasource.druid.oracle.keep-alive=true
#触发心跳的间隔时间（DestroyTask守护线程检测连接的间隔时间），默认：60*1000 一分钟
spring.emily.datasource.druid.oracle.time-between-eviction-runs-millis=60000
#连接保持空闲而不被驱逐的最小时间（保活心跳只会对存货时间超过这个值的连接进行），默认：1000L * 60L * 30L
spring.emily.datasource.druid.oracle.min-evictable-idle-time-millis=1800000
#连接保持空闲最长时间（连接有任何操作，计时器重置，否则被驱逐），默认：1000L * 60L * 60L * 7
spring.emily.datasource.druid.oracle.max-evictable-idle-time-millis=25200000
#保活检查间隔时间，默认：60*1000*2毫秒，要求大于等于2分钟（要大于min-evictable-idle-time-millis）
spring.emily.datasource.druid.oracle.keep-alive-between-time-millis=120000

#如果一个连接持有超过指定时间还没有归还，就被认为是异常连接，防止互锁
spring.emily.datasource.druid.oracle.remove-abandoned=false
#默认：300*1000
spring.emily.datasource.druid.oracle.remove-abandoned-timeout-millis=300000
#回收连接时打印日志，默认：false
spring.emily.datasource.druid.oracle.log-abandoned=false

#物理超时时间，默认：-1
spring.emily.datasource.druid.oracle.phy-timeout-millis=-1
#物理最大连接数，默认：-1（不建议配置）
spring.emily.datasource.druid.oracle.phy-max-use-count=-1

#https://github.com/alibaba/druid/issues/1365
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭（mysql5.5之后版本建议开启）。默认：false
spring.emily.datasource.druid.oracle.pool-prepared-statements=true
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100，默认：-1
spring.emily.datasource.druid.oracle.max-pool-prepared-statement-per-connection-size=10

#数据库连接失败重试几次之后允许终止或休眠一段时间再重试，默认：1
spring.emily.datasource.druid.oracle.connection-error-retry-attempts=1
#数据库连接失败，是否退出重试，默认：false
spring.emily.datasource.druid.oracle.break-after-acquire-failure=false
#数据库连接失败，重试间隔多久，默认：500ms
spring.emily.datasource.druid.oracle.time-between-connect-error-millis=500

spring.emily.datasource.druid.oracle.filters=stat,wall,log4j2
#druid.stat.mergeSql是否合并sql，默认：false
#druid.stat.slowSqlMillis慢sql查询阀值，默认：3秒
#druid.stat.logSlowSql是否开启慢sql查询，默认：false
#druid.stat.slowSqlLogLevel配置展示sql的日志级别,默认：ERROR
spring.emily.datasource.druid.oracle.connection-properties=\
  druid.stat.mergeSql=false;\
  druid.stat.slowSqlMillis=3000;\
  druid.stat.logSlowSql=true;\
  druid.stat.slowSqlLogLevel=error

